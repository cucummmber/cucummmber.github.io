[{"content":"下载 hugo 从 Github Releases 页面下载对应系统的 extended 版本二进制文件。\nor 使用 scoop下载无需配置环境变量。\n1 scoop install hugo-extended 解压从 Github 下载的压缩包，将hugo.exe放置到任意目录，并将此目录加入到环境变量。\n设置环境变量 打开 Poweshell 输入命令，路径改为你的 hugo.exe 所在目录。\n1 Set-ItemProperty -Path HKCU:\\Environment -Name Path -Value ($env:Path + \u0026#34;;D:\\hugo\u0026#34;) 关闭 Poweshell 重新打开 （ps：使用 Windows Terminal 需要将其全部关闭，只关闭 Poweshell 标签无用） 。\n1 2 3 $ $env:PATH //查看环境变量是否添加成功 $ hugo version //查看 hugo 版本 hugo v0.113.0-085c1b3d614e23d218ebf9daad909deaa2390c9a+extended windows/amd64 BuildDate=2023-06-05T15:04:51Z VendorInfo=gohugoio 生成项目 使用 hugo new site myblog 在当前目录生成 blog 项目 myblog，并切换到 myblog 目录。\n1 2 3 $ hugo new site myblog Congratulations! Your new Hugo site is created in D:\\Code\\myblog. $ cd myblog 下载 hugo-theme-stack 主题 stack 主题文档：https://stack.jimmycai.com/ 使用 git 命令将主题下载至 themes 文件夹。\n1 git clone https://github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack 或添加为 git 项目的子模块（如果你已经将 myblog 目录添加到版本控制）。\n1 git submodule add https://github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack 配置主题 将 stack主题目录下 exampleSite 文件夹中的内容，全部复制到blog 项目根目录。\n打开 config.yaml 配置文件\n修改默认语言 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 将 title 全部改为自己的 title: Example Site title: 演示站点 # 根据需要，将对阿拉伯语的支持注释掉 # ar: # languageName: عربي # languagedirection: rtl # title: موقع تجريبي # description: وصف تجريبي # weight: 3 # 更改网站的默认语言为中文简体 DefaultContentLanguage: zh-cn hasCJKLanguage: true 将 content/_index.md 改为 _index.en.md 将content/page 目录下所有 index.md 改为 index.en.md 。\n之后再创建 index.md 默认识别为中文文章，index.en.md 为英文文章，在切换网站语言时会根据语言分别显示不同的文章。（ps：不修改默认语言无需此操作）\n此时网站切换为中文时，有一部分仍显示为英文。\n将 content/page 下四个目录中的 index.en.md 文件全部复制一份改名为 index.zh-cn.md 并打开，修改 title: xxx ，xxx部分改为中文。\n部分配置解释 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # params 部分 params: favicon: /favicon.ico\t# 网站的图标，放置在网站根目录 static 文件夹 footer: since: 2020\t# 页脚的网页创建年份 customText:\t# 页脚自定义文本，支持html sidebar:\t# 侧边栏 emoji: 😳\t# 头像上显示的表情 subtitle: a...\tavatar: enabled: true\t# 是否启用头像 local: true\tsrc: img/Akari.png\t# 图像位置，项目根目录 assets 文件夹下 comments:\t# 评论系统 enabled: true\t# 是否启用 provider: utterances\t# 使用那个评论系统，推荐 utterances widgets:\t# 网站右侧显示的内容，详情参见主题文档 # menu部分 menu: social:\t# 头像下方的链接 运行一下看看效果\n1 hugo server 设置文章模板 打开 .\\archetypes\\default.md 修改配置\n1 2 3 4 5 6 7 8 9 10 11 12 13 --- author: title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} draft: true description: keywords: tags: categories: image: toc: true license: --- 发布文章 将 content\\post 文件夹下所有内容删除掉，创建一篇文章 my-first-post 。\n1 hugo new post/my-first-post/index.md 打开 index.md 加入内容，修改title为中文。同级目录下创建 index.en.md ，将index.md 中内容全部复制过去，并改成英文。\n运行hugo server 查看效果\n1 hugo server --buildDrafts 重新打开文件，将 draft: true 改为 draft: false ，保存并再次启动服务。\n1 hugo server 部分文章配置翻译 文章配置写在文章最上方，使用 “ \u0026mdash; ” 或者 “ +++ ” 包裹。例如：\n1 2 3 4 5 6 --- title: 123 --- +++ title = \u0026#34;123\u0026#34; +++ “ \u0026mdash; ” 内为 yaml 语法，“ +++ ” 内为 toml 语法，要遵循相应的语法格式。\n1 2 3 4 5 6 7 8 9 10 11 12 author: Type:string\t# 作者 tags: Type:[]string\t# 标签 categories: Type:[]string\t# 分类 draft: Type:bool # 是否草稿，草稿需运行服务时加入 --buildDrafts 指令才会显示 description: Type:string\t# 显示在文章卡片上的描述 image: Type:string\t# 显示在文章卡片和文章最上方的图片 comments: Type:bool\t#是否显示评论 license: Type:string|bool\t# 版权许可声明，false 时不显示 math: Type:bool\t# 是否开启数学公式支持 toc: Type:bool\t# 是否显示文章的目录 keywords: Type:[]string\t# 页面的关键字。对于搜索引擎优化有用。 readingTime: Type:bool\t# 显示/隐藏页面的阅读所需时间 部署到 Github 编写自动化部署工作流 修改 config.yaml ,中的 baseurl ，为你的链接。例如 https://username.github.io\n1 baseurl: https://blog.cucummmber.cn/ 利用 Github Actions 自动部署到 Github pages ，GitHub Actions 是一个(CI/CD) 平台， 它可以让你自动化你的构建、测试和部署流程。\n想要使用需要在repo根目录创建 .github\\workflows\\xxx.yaml 。\n以下是一个工作流示例：当收到 push 事件时，会自动拉取代码，缓存 resources 文件夹，安装Hugo，构建 blog ，然后自动发布到 Github pages 。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 name: github pages # 工作流的名称 # 触发工作流的事件 Event 下面设置的是当 push 到 master 分支后触发 # 其他的事件还有：pull_request/page_build/release # 可参考：https://help.github.com/en/actions/reference/events-that-trigger-workflows on:\tpush: branches: - master # jobs 即工作流中的执行任务 jobs: build-deploy: # job-id runs-on: ubuntu-20.04 # 容器环境 # needs: other-job 如果有依赖其他的 job 可以如此配置 # 任务步骤集合 steps: - name: Checkout\t# 步骤名称 uses: actions/checkout@v3\t# 引用可重用的 actions，比如这个就是 GitHub 官方的用于拉取代码的actions `@` 后面可以跟指定的分支或者 release 的版本或者特定的commit with:\t# 当前 actions 的一些配置 submodules: true # 如果项目有依赖 Git 子项目时可以设为 true，拉取的时候会一并拉取下来 - name: Cache Hugo resources\t#缓存 resources 文件夹 uses: actions/cache@v2 env: cache-name: cache-hugo-resources with: path: resources key: ${{ env.cache-name }} - name: Setup Hugo uses: peaceiris/actions-hugo@v2\t# 一个开源的 actions 用于安装 Hugo with: hugo-version: \u0026#39;0.112.2\u0026#39; #hugo 版本 extended: true\t# 是否启用 hugo extend - name: Build run: hugo --minify --gc # 一个 step 也可以直接用 run 执行命令。如果有多个命令可以如下使用 #run: | #npm ci #npm run build - name: Deploy uses: peaceiris/actions-gh-pages@v3 # 开源 actions 用于部署 with: github_token: ${{ secrets.GITHUB_TOKEN}} # GitHub 读写仓库的权限token，自动生成无需关心 publish_dir: ./public\t# 发布 ./public 的内容到默认的 gh-pages 分支 cname: blog.cucummmber.cn\t# 自定义域名，不需要可删掉 创建 Github 仓库 打开 https://github.com/ 创建一个仓库，命名为 ” username.github.io “ 例如：cucummmber.github.io\nGITHUB_TOKEN 为 Actions 工作时自动创建的一个变量，如果希望 Workflow 能够正常的推送代码，请确保你的 Workflow permissions 有写入权限。\n在此设置 Workflow 权限，你的仓库 -\u0026gt; Settings -\u0026gt; Actions -\u0026gt; General , 滑动到页面最下方 ，将 Workflow permissions 设置为 Read and write permission 。\n将项目推送至 github 仓库。\n1 2 3 4 5 6 7 8 9 git init\t# 初始化为 git 仓库 git submodule add https://github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack\t# 将 stack 主题项目添加为 blog 项目的子模块 git add .\tgit commit -m \u0026#34;message\u0026#34; git remote add origin \u0026lt;远程存储库URL\u0026gt;\t# 添加一个远程仓库 git branch gh-pages #创建一个分支 git push -u origin master git push origin gh-pages\t#将分支推送到远程仓库 网页打开你的仓库，选择 Settings -\u0026gt; Pages 将 Build and deployment 项设置为 Deploy from branch ，并选择 gh-pages 分支，不然第一次部署无法成功。\n再次将主分支推送到远程仓库。\n1 git push -u origin master 如无意外应该自动部署成功。\n添加 utterances 评论 参考官方文档：utterances\n无跟踪，无广告，永远免费\n所有数据都保存在 github 的 issues\n轻量，不需要下载字体等\n1.安装 utterances ，访问链接直接安装即可。GitHub App 链接：https://github.com/apps/utterances\n仓库选择刚刚创建的 ” username.github.io “\n2.配置 comments ，打开 config.yaml 文件，导航到 comments 选项\n1 2 3 4 5 6 7 8 comments: enabled: true\t# 开启评论功能 provider: utterances\t# 选择 utterances 评论插件 utterances: repo: 用户名/仓库名\t# 存储评论的仓库 issueTerm: pathname label: comment 3.测试\n1 hugo server 4.推送\n1 git push 部署到 Netlify Github 因为众所周知的原因，在国内访问很慢，甚至无法访问，我们可以在 Netlify 再部署一份，用作负载均衡，\n使用 Netlify 部署非常简单，只需点点鼠标。\n注册 Netlify 账号 地址：https://app.netlify.com/ 直接使用 Github 登录即可。\n从 GIthub 导入项目 1.选择 Sites - \u0026gt; Add new site -\u0026gt; import an existing project ，从现存项目导入\n2.选择 Deploy with GitHub ，在弹出页面选择你的 blog 所在项目\n3.点击项目进入配置页面\n4.设置 Build command 为 hugo \u0026ndash;minify \u0026ndash;gc ，设置 Publish directory public ，点击 Deploy\n之后 github 接收到 push 这边会同时自动部署。部署成功后可根据需要自定义为自己的域名，并在域名提供商设置里，将自己的域名同时解析到 Netlify 和 Github pages。\n","date":"2023-07-01T21:02:13+08:00","permalink":"https://blog.cucummmber.cn/p/hugo-%E6%95%99%E7%A8%8B%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2stack-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/","title":"Hugo 教程，自动部署，stack 主题配置"},{"content":"Summary.\n前置 名称 版本 源地址 描述 fabric-api v0.46.1 curseforge/fabric-api fabric核心库 balm v2.4.1 curseforge/balm Blay 的多平台模组的抽象层 architectury v3.6.14 curseforge/architectury 多平台mod前置 cloth-api v3.1.61 curseforge/cloth-api Fabric 和 Forge 的客户端配置屏幕 API cloth-config v6.1.48 curseforge/cloth-config Cloth Config API 是一个配置屏幕 api collective v3.14 curseforge/collective Collective 是一个共享库模块 fabric-language-kotlin v1.6.10 curseforge/fabric-language-kotlin 一个允许将Kotlin编程语言用于Fabric的mod Iceberg v1.0.38 curseforge/iceberg-fabric 一个库，不做任何事情 malilib v0.11.6 curseforge/malilib masa 全家桶的前置mod modmenu v3.0.1 curseforge/modmenu mod菜单 性能优化 名称 版本 源地址 描述 sodium v0.4.0 curseforge/sodium 替代原版渲染 iris v1.2.0 curseforge/iris 加载光影 lithium v0.7.7 curseforge/lithium 很多优化，节省内存 bobby v3.1.0 curseforgebobby 缓存服务器区块 smoothboot v1.7.0 curseforge/smooth-boot 优化 Minecraft 加载性能 fastfurnace v4 curseforge/fastfurnace 优化熔炉性能 entityculling v1.3.3 curseforge/entityculling 优化实体渲染 ferritecore v4.0.0 curseforge/ferritecore 减少 Minecraft 的内存使用 starlight v1.0.1 curseforge/starlight 用于重写光引擎以修复照明性能 lazydfu v0.1.2 curseforge/lazydfu 加载优化，延迟DFU的编译 hydrogen * github/hydrogen 降低内存占用 krypton v0.1.6 curseforge/krypton 优化网络 c2me-fabric v0.2.0 curseforge/c2me 优化区块加载 dynamic-fps v2.1.0 curseforge/dynamic-fps 动态FPS 体验优化 名称 版本 源地址 描述 lambdynamiclights v2.1.0 curseforge/lambdynamiclights 动态光源 notenoughanimations v1.4.0 curseforge/notenoughanimations 更多动画 extrasounds v2.2.0 curseforge/extrasounds 更多音效 betterf3 v1.2.2 curseforge/betterf3 更好的F3 betterthirdperson v1.6.0 curseforge/betterthirdperson 更好的第三人称 imblockerfabric v1.0.17 curseforge/imblockerfabric 输入法冲突修复 bsvsb v2.0.5 curseforge/bettersodiumvideosettings 更好的钠设置按钮 presencefootsteps v1.4.0 curseforge/presencefootsteps 脚步声 blur v2.4.1 curseforge/blur 背景模糊 fallingleaves v1.9.0 curseforge/fallingleaves 落叶效果 customskinloader v14.13 curseforge/customskinloader 皮肤加载补丁 fabric-optifine-capes v2.0.0 * 加载披风 wthit v4.4.1 curseforge/wthit 显示方块信息 enhanced_attack_indicator v1.0.2 curseforge/enhancedattackindicator 更好的攻击指示器 Loading-Timer v1.5 curseforge/LoadingTimer 加载时间显示 chat_heads v0.6.0 curseforge/chatheads 聊天显示头像 appleskin v2.3.0 curseforge/appleskin 显示饱食度 shulkerboxtooltip v3.0.5 curseforge/shulkerboxtooltip 潜影盒提示工具 held-item-info v1.2.0 curseforge/held-item-info 手持物品信息提示 hwyla-addon-horseinfo v0.4.1 curseforge/hwyla-addon-horseinfo 马信息显示 advancementinfo v0.43.1 curseforge/advancementinfo 详细的成就 inventoryhud v3.4.2 curseforge/inventoryHUD 物品栏增强 jumpoverfences v0.0.3 curseforge/jumpoverfences 跳过栅栏 graves v2.0.0 modrinth/graves 坟墓 xaerosworldmap v1.20.1 curseforge/xaeros-world-map 世界地图 xaerosminimap v22.1.2 curseforge/xaeros-minimap 小地图 实用工具 名称 版本 源地址 描述 okzoomer v5.0.0 curseforge/ok-zoomer C 键放大 carpet v1.4.57 curseforge/carpet 地毯 itemscroller v0.15.0 curseforge/item-scroller MASA全家桶之一 litematica v0.10.1 curseforge/litematica 投影 minihud v0.21.3 curseforge/minihud MASA全家桶之一 tweakeroo v0.12.2 curseforge/tweakeroo MASA全家桶之一 autofish v0.9.4 curseforge/autofish 自动钓鱼 roughlyenoughitems v7.2.418 curseforge/roughlyenoughitems REI物品管理 inventoryprofilesnext v1.2.4 curseforge/inventoryprofilesnext 一键管理物品 chesttracker v1.1.9 curseforge/chesttracker 箱子物品追踪 fabrishot v1.6.0 curseforge/fabrishot 高清截图 F9 TweakMyClient v [curseforge/tweakmyclient](TweakMyClient - Minecraft Mods - CurseForge) 对客户端各种自定义配置与特色功能，如自动爬梯子自动图腾等 oh my minecraft plusls/oh-my-minecraft-client(github.com) 保留聊天记录。自动换鞘翅等众多好用功能 xaero map addition Xaero地图添加 (curseforge.com)) 对xaero地图进行了一些改进 MasaGadget plusls/MasaGadget: Masa Gadget (github.com) 渲染村民交易第一本书、僵尸村民转换时间等，对masa系列mod进行了很多改进和添加了很多功能 其他 MASA全家桶汉化资源包\tb站醉梦巅峰 BSL 光影 capttatsu 红石显示材质 b站 XeKr ","date":"2023-06-19T15:39:23+08:00","image":"https://blog.cucummmber.cn/p/minecraft-%E7%94%9F%E7%94%B5%E9%80%82%E7%94%A8%E6%A8%A1%E7%BB%84fabric-%E6%9D%90%E8%B4%A8/minecraft_huba78d23ef0e918f07f28172f7237e86f_383650_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.cucummmber.cn/p/minecraft-%E7%94%9F%E7%94%B5%E9%80%82%E7%94%A8%E6%A8%A1%E7%BB%84fabric-%E6%9D%90%E8%B4%A8/","title":"Minecraft 生电适用模组(fabric) 材质"}]